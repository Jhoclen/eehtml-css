

:root{
    --gap: 3rem;
    --light-gray-color: #EEEEEE;
}

*{
    margin: 0; 
    padding: 0;
}

html{
    font-size: 62.5%;
    scroll-behavior: smooth;
}

body {
    font-size: 1.6rem;
    font-family: "Open Sans", sans-serif;
   
    
}
h1, h2, h3, h4, h5, h6{
    font-family: "Montserrat", sans-serif;
    
}

h1{
    font-size: 6rem;
    text-transform:  uppercase;
}

h2{
    font-size: 4rem;
    margin-bottom: 5rem;
    text-transform: uppercase;
    
}

h3{
    font-size: 5rem;
}

h4{
    font-size: 4.5rem;
}

h5{
    font-size: 4rem;
}

h6{
    font-size: 3.5rem;
}
a {
 text-decoration: none;           

}
p{
  line-height: 3rem; 
  margin-bottom: 3rem; 
}
/* criando a barra do nav-bar onde fica a logo e o nav de fato*/
.menu{
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100%;
    border-bottom: 0.1rem solid var(--light-gray-color);
    z-index: 1;
    
}
.menu .main-content{
    padding-top: 0;
    padding-bottom: 0;
}
.menu-content{
    display: flex;
    justify-content:space-between;
    align-items: center;
    /*o motivo é pq  eu quero que o tamanho do a empurre o conteiner para baixo */
    padding-top: 0;
    padding-bottom: 0;
    
}
.menu h1{
    font-size: 2.5rem; 
}
/* um conteiner flex dentro de outro usando o ul como conteiner para fazer a lista horizontal(séria fazer o li fica um do lado do outro ao inves de um embaixo do outro como padrão */
.menu ul{
    list-style: none;
    display: flex;

}
/* para ajustar a ul apartir do meu a que é padrão inline  não empurra o conteiner para baixo por isso a mudança para display block*/
.menu ul li a{
   display: block;
   padding: 2rem;
   font-size: 1.5rem;
   /*para o pseudo elemento after ser relativo ao a*/
   position: relative;
}
.menu ul li a::after{
    content: '';
    position: absolute;
    bottom: 1rem;
    left: 50%;
    /*aqui está o pulo do gato para fazer a animação*/
    width: 0;
    height: 0.2rem;
    background: crimson; 
    transition: all 300ms ease-in-out;
 }
 .menu ul li a:hover:after{
    width: 50%;
    left: 25%;
   
 }

 .menu-spacing{
    height: 6.4rem
 }
.main-bg{
    background-image: url('../img/main-bg.svg');
    background-size: cover;
    background-position: center center;
    color: white;
}
.white-bg{
    background: white;
}

.main-content{
    max-width: 120rem;
    margin: 0 auto;
    padding: 8rem var(--gap);
}
.section{
    min-height: 100vh;
    
}
/*criação da grid para o conteudo (lembrado que a grid deve ser criada englobado o conteudo sempre em um conteiner maior onde abriga o conteudo)*/
.intro-content{
    display: grid;
    grid-template-columns: 1fr 1.5fr ;
    gap: var(--gap);
    min-height: 100vh;
}
/* aqui vc criou o flex dentro da grid para organizar o conteudo ( flex-flow: o primeiro comando para decidir o Main Axis , o wrap é basicamente um comando pra quebrar linha quando for necessario*/
.intro-text, .intro-img{
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
    /*ajustando por conta da div que foi criada para da um espaço do menu(isso pq o 64rem de espaço que foi dado não deixa alinha o conteudo ao centro com o comando padrão do flex então foi feito essa alteração para alinha o conteudo )*/
    /*position: relative;
     top: -5rem;
    pode ser feito essa auteração mas eu encontrei uma forma que julguei melhor*/
}

.intro-img img{
    max-width: 100%;
    height: auto;
    position: relative;
    max-height: 40.0rem;
}

.top3-content{
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    min-height: 100vh;
    max-width: 70rem;
    text-align: center;
    padding-top: 5rem;

}
.grid-content{
    display: flex;
    flex-flow: column wrap;
    justify-content: center;
    min-height: 100vh;

}
.grid-content h2{  
    margin-bottom: 1rem; 
    font-size: 4.5rem;
    

}
.description{
    padding-bottom: 6rem;
}
.grid{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--gap);
    counter-reset: gridzin;
}
.grid h3{
    font-size: 2.5rem;
    position: relative;
    padding-left: 7rem;
    padding-bottom: 3rem;
}
.grid h3::before{
    counter-increment: gridzin;
    content: counter(gridzin);
    font-style: italic;
    font-size: 7rem;
    position:absolute;
    bottom: 0rem;
    left: 0rem;
    transform : rotate(5deg);

}

.gallery-img{
    width: 100%;
    max-width: 36rem;
    max-height: 36rem;
    overflow: hidden;
    
    
}
.gallery-img img{
    transition: all 300ms ease-in-out;
    object-fit: contain;
    
}
.gallery-img img:hover{
    transform: translate(-3%,3%) scale(1.2) rotate(5deg);

}
.work-content{
    display: flex;
    flex-flow: column nowrap;
    justify-content: center;
    text-align: center;
    max-width: 70rem;
    min-height: 100vh;
}


